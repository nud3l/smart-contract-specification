

module AbsSpec where

-- Haskell module generated by the BNF converter




data Specification = Spec [Statement]
  deriving (Eq, Ord, Show, Read)

data Statement
    = Config [ConfigurationExp]
    | Store [StorageTypedExp]
    | Global [BooleanExp]
    | Pure FunctionSignature PureFunction
    | Trans FunctionSignature TransitionFunction
  deriving (Eq, Ord, Show, Read)

data ConfigurationExp
    = Target TargetType | Language LanguageType | Meter MeterType
  deriving (Eq, Ord, Show, Read)

data TargetType = TarEVM | TarEWASM | TarIELE | TarScilla
  deriving (Eq, Ord, Show, Read)

data LanguageType = LanSol | LanVy | LanFlin
  deriving (Eq, Ord, Show, Read)

data MeterType = Gas
  deriving (Eq, Ord, Show, Read)

data StorageTypedExp = SVar TermTyped | SMap MappingTyped
  deriving (Eq, Ord, Show, Read)

data TermTyped = SVarDecl String BuiltinTypes
  deriving (Eq, Ord, Show, Read)

data MappingTyped = SMapDecl String StorageTypedExp TermTyped
  deriving (Eq, Ord, Show, Read)

data StorageUntypedExp = SUvar String | SUmap Mapping
  deriving (Eq, Ord, Show, Read)

data Mapping = SUmapDecl String StorageUntypedExp
  deriving (Eq, Ord, Show, Read)

data FunctionSignature = FunSig String [StorageUntypedExp]
  deriving (Eq, Ord, Show, Read)

data PureFunction = PureFun Inputs Outputs PostCondition
  deriving (Eq, Ord, Show, Read)

data TransitionFunction
    = TransFun Inputs Assign PreCondition PostCondition
  deriving (Eq, Ord, Show, Read)

data Inputs = In [StorageTypedExp]
  deriving (Eq, Ord, Show, Read)

data Outputs = Out [Returns]
  deriving (Eq, Ord, Show, Read)

data Returns = SReturn StorageUntypedExp | MReturn StorageTypedExp
  deriving (Eq, Ord, Show, Read)

data Assign = Assig [StorageUntypedExp]
  deriving (Eq, Ord, Show, Read)

data PreCondition = PreCon [BooleanExp]
  deriving (Eq, Ord, Show, Read)

data PostCondition = PostCon [BooleanExp]
  deriving (Eq, Ord, Show, Read)

data BasicExp
    = BLitExp Literal
    | BTermExp StorageUntypedExp
    | BArithExp ArithmeticExp
    | BInitExp StorageUntypedExp
  deriving (Eq, Ord, Show, Read)

data BooleanExp = BoolExp BasicExp Boolean BasicExp
  deriving (Eq, Ord, Show, Read)

data ArithmeticExp = ArithExp BasicExp Arithmetic BasicExp
  deriving (Eq, Ord, Show, Read)

data Boolean = Eq | GEq | LEq | Ge | Le
  deriving (Eq, Ord, Show, Read)

data Arithmetic = Add | Sub | Mul | Div
  deriving (Eq, Ord, Show, Read)

data BuiltinTypes
    = IntType
    | AddrType
    | BoolType
    | AssetType
    | StringType
    | BytesType
  deriving (Eq, Ord, Show, Read)

data Literal
    = IntLit Integer | TrueLit | FalseLit | StringLit String
  deriving (Eq, Ord, Show, Read)

