
Block = Statement*;
Statement = '@' (Configuration | Storage | Global | Function);

Configuration = 'config' ConfigurationItem*;
ConfigurationItem = ConfigurationIdentifier ':' ConfigurationType;
ConfigurationIdentifier = 'target' | 'language' | 'meter';
ConfigurationType = TargetType | LanguageType | MeterType;
TargetType = 'EVM' | 'EWASM' | 'IELE' | 'SCILLA';
ContractType = 'Solidity' | 'Vyper' | 'Flint';
MeterType = 'Gas';

Storage = 'storage' StorageItem*;
StorageItem = Identifier ':' BuiltinTypes | MappingItem;
MappingItem = Mapping ' => ' StorageItem;
Mapping = Identifier '[' StorageItem ']' | Identifier '[' Identifier ']';

Global = 'global' GlobalItem*;
GlobalItem = Identifier BooleanOperator (Literal | Identifier);

Function = ('pure' | 'transition') FunctionItem;
FunctionItem = FunctionSignature (PureFunction | TransitionFunction);
FunctionSignature = Identifier '(' (Identifier*)? ')';
PureFunction = Inputs Outputs PostCondition;
TransitionFunction = Inputs Assign PreCondition PostCondition;
Inputs = 'inputs:' StorageItem*;
Outputs = 'outputs:' (Identifier* | StorageItem*);
Assign = 'assigns:' (Identifier* | Mapping*);
PreCondition = 'requires:' Condition*;
PostCondition = 'ensures:' Condition*;
Condition = (Identifier | Mapping) BooleanOperator ();


BooleanOperator = '==' | '<=' | '>=' | '<' | '>';

Literal = NumberLiteral | StringLiteral | HexLiteral | TrueLiteral | FalseLiteral;
Identifier = [a-zA-Z_$] [a-zA-Z_$0-9]*;
TypeName = Identifier | BuiltinTypeName;
BuiltinTypeName = 'bool' | [us] ( '8' | '32' | '64' | '128' | '256' );
BuiltinTypes = 'Int' | 'Address' | 'Bool' | 'Asset' | 'String' | 'Bytes';
NumberLiteral = HexNumber | DecimalNumber;
HexLiteral = 'hex' ('"' ([0-9a-fA-F]{2})* '"' | '\'' ([0-9a-fA-F]{2})* '\'');
StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"';
TrueLiteral = 'True';
FalseLiteral = 'False';
HexNumber = '0x' [0-9a-fA-F]+;
DecimalNumber = [0-9]+;
