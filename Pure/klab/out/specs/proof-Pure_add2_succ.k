requires "../rules.k"

module PROOF-PURE_ADD2_SUCC
  imports ETHEREUM-SIMULATION
  imports EVM
  imports RULES

// Pure_add2
rule
  <k> #execute ~> CONTINUATION => #halt ~> CONTINUATION </k>
  <exit-code> 1 </exit-code>
  <mode> NORMAL </mode>
  <schedule> BYZANTIUM </schedule>
  <analysis> .Map </analysis>
  <ethereum>
    <evm>
      <output> _ => #asByteStackInWidthaux(ABI_A +Int ABI_B, 31, 32, .WordStack) </output>
      <statusCode> _ => EVMC_SUCCESS </statusCode>
      <callStack> VCallStack </callStack>
      <interimStates> _ </interimStates>
      <touchedAccounts> _ => _ </touchedAccounts>
      <callState>
        <program> #asMapOpCodes(#dasmOpCodes(#parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329fcda331461005c578063771602f7146100a7578063b67d77c5146100f2575b600080fd5b34801561006857600080fd5b50610091600480360381019080803590602001909291908035906020019092919050505061013d565b6040518082815260200191505060405180910390f35b3480156100b357600080fd5b506100dc600480360381019080803590602001909291908035906020019092919050505061015c565b6040518082815260200191505060405180910390f35b3480156100fe57600080fd5b5061012760048036038101908080359060200190929190803590602001909291905050506101e1565b6040518082815260200191505060405180910390f35b6000818301905082811015151561015357600080fd5b80905092915050565b600082828401915081101515156101db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f6f766572666c6f7700000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b60008282840391508111151515610260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f756e646572666c6f77000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b929150505600a165627a7a723058204e764086b08fb2e6d262c58e3478a14a561a14bbfc19fa4d812da7c867fdf9910029"), BYZANTIUM)) </program>
        <programBytes> #parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329fcda331461005c578063771602f7146100a7578063b67d77c5146100f2575b600080fd5b34801561006857600080fd5b50610091600480360381019080803590602001909291908035906020019092919050505061013d565b6040518082815260200191505060405180910390f35b3480156100b357600080fd5b506100dc600480360381019080803590602001909291908035906020019092919050505061015c565b6040518082815260200191505060405180910390f35b3480156100fe57600080fd5b5061012760048036038101908080359060200190929190803590602001909291905050506101e1565b6040518082815260200191505060405180910390f35b6000818301905082811015151561015357600080fd5b80905092915050565b600082828401915081101515156101db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f6f766572666c6f7700000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b60008282840391508111151515610260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f756e646572666c6f77000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b929150505600a165627a7a723058204e764086b08fb2e6d262c58e3478a14a561a14bbfc19fa4d812da7c867fdf9910029") </programBytes>
        <id> ACCT_ID </id>
        <caller> CALLER_ID </caller>
        <callData> #abiCallData("add2", #uint256(ABI_A), #uint256(ABI_B)) </callData>
        <callValue> 0 </callValue>
        <wordStack> .WordStack => _ </wordStack>
        <localMem> .Map => _ </localMem>
        <pc> 0 => _ </pc>
        <gas> VGas => _ </gas>
        <memoryUsed> 0 => _ </memoryUsed>
        <previousGas> _ => _ </previousGas>
        <static> false </static>
        <callDepth> VCallDepth => _ </callDepth>
      </callState>
      <substate>
        <selfDestruct> VSelfDestruct </selfDestruct>
        <log> _ => VLog </log>
        <refund> _ => VRefund </refund>
      </substate>
      <gasPrice> _ </gasPrice>
      <origin> ORIGIN_ID </origin>
      <previousHash> _ </previousHash>
      <ommersHash> _ </ommersHash>
      <coinbase> _ </coinbase>
      <stateRoot> _ </stateRoot>
      <transactionsRoot> _ </transactionsRoot>
      <receiptsRoot> _ </receiptsRoot>
      <logsBloom> _ </logsBloom>
      <difficulty> _ </difficulty>
      <number> _ </number>
      <gasLimit> _ </gasLimit>
      <gasUsed> _ </gasUsed>
      <timestamp> TIME </timestamp>
      <extraData> _ </extraData>
      <mixHash> _ </mixHash>
      <blockNonce> _ </blockNonce>
      <ommerBlockHeaders> _ </ommerBlockHeaders>
      <blockhash> _ </blockhash>
    </evm>
    <network>
      <activeAccounts> SetItem(ACCT_ID) _ </activeAccounts>
      <accounts>
        <account>
          <acctID> ACCT_ID </acctID>
          <balance> BAL </balance>
          <code> #parseByteStack("0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329fcda331461005c578063771602f7146100a7578063b67d77c5146100f2575b600080fd5b34801561006857600080fd5b50610091600480360381019080803590602001909291908035906020019092919050505061013d565b6040518082815260200191505060405180910390f35b3480156100b357600080fd5b506100dc600480360381019080803590602001909291908035906020019092919050505061015c565b6040518082815260200191505060405180910390f35b3480156100fe57600080fd5b5061012760048036038101908080359060200190929190803590602001909291905050506101e1565b6040518082815260200191505060405180910390f35b6000818301905082811015151561015357600080fd5b80905092915050565b600082828401915081101515156101db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f6f766572666c6f7700000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b60008282840391508111151515610260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f756e646572666c6f77000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b929150505600a165627a7a723058204e764086b08fb2e6d262c58e3478a14a561a14bbfc19fa4d812da7c867fdf9910029") </code>
          <storage> (_:Map)
           </storage>
          <nonce> _ </nonce>
        </account>
       ... 
      </accounts>
      <txOrder> _ </txOrder>
      <txPending> _ </txPending>
      <messages> _ </messages>
    </network>
  </ethereum>
requires #rangeAddress(ACCT_ID)
andBool #notPrecompileAddress(ACCT_ID)
andBool #rangeAddress(CALLER_ID)
andBool #rangeAddress(ORIGIN_ID)
andBool #rangeUInt(48, TIME)
andBool #rangeUInt(256, BAL)
andBool VCallDepth <=Int 1024

    andBool (#rangeUInt(256, ABI_A)
    andBool (#rangeUInt(256, ABI_B)
    andBool (VGas >Int 500
    andBool (#rangeUInt(256, ABI_A +Int ABI_B))))) 

endmodule
