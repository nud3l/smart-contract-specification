module SkelSpec where

-- Haskell module generated by the BNF converter

import AbsSpec
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transSpecification :: Specification -> Result
transSpecification x = case x of
  Spec statements -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Config configurationexps -> failure x
  Store storagetypedexps -> failure x
  Global booleanexps -> failure x
  Pure functionsignature purefunction -> failure x
  Trans functionsignature transitionfunction -> failure x
transConfigurationExp :: ConfigurationExp -> Result
transConfigurationExp x = case x of
  Target targettype -> failure x
  Language languagetype -> failure x
  Meter metertype -> failure x
transTargetType :: TargetType -> Result
transTargetType x = case x of
  TarEVM -> failure x
  TarEWASM -> failure x
  TarIELE -> failure x
  TarScilla -> failure x
transLanguageType :: LanguageType -> Result
transLanguageType x = case x of
  LanSol -> failure x
  LanVy -> failure x
  LanFlin -> failure x
transMeterType :: MeterType -> Result
transMeterType x = case x of
  Gas -> failure x
transStorageTypedExp :: StorageTypedExp -> Result
transStorageTypedExp x = case x of
  SVar termtyped -> failure x
  SMap mappingtyped -> failure x
transTermTyped :: TermTyped -> Result
transTermTyped x = case x of
  SVarDecl string builtintypes -> failure x
transMappingTyped :: MappingTyped -> Result
transMappingTyped x = case x of
  SMapDecl string storagetypedexp termtyped -> failure x
transStorageUntypedExp :: StorageUntypedExp -> Result
transStorageUntypedExp x = case x of
  SUvar string -> failure x
  SUmap mapping -> failure x
transMapping :: Mapping -> Result
transMapping x = case x of
  SUmapDecl string storageuntypedexp -> failure x
transFunctionSignature :: FunctionSignature -> Result
transFunctionSignature x = case x of
  FunSig string storageuntypedexps -> failure x
transPureFunction :: PureFunction -> Result
transPureFunction x = case x of
  PureFun inputs outputs postcondition -> failure x
transTransitionFunction :: TransitionFunction -> Result
transTransitionFunction x = case x of
  TransFun inputs assign precondition postcondition -> failure x
transInputs :: Inputs -> Result
transInputs x = case x of
  In storagetypedexps -> failure x
transOutputs :: Outputs -> Result
transOutputs x = case x of
  Out returnss -> failure x
transReturns :: Returns -> Result
transReturns x = case x of
  SReturn storageuntypedexp -> failure x
  MReturn storagetypedexp -> failure x
transAssign :: Assign -> Result
transAssign x = case x of
  Assig storageuntypedexps -> failure x
transPreCondition :: PreCondition -> Result
transPreCondition x = case x of
  PreCon booleanexps -> failure x
transPostCondition :: PostCondition -> Result
transPostCondition x = case x of
  PostCon booleanexps -> failure x
transBasicExp :: BasicExp -> Result
transBasicExp x = case x of
  BLitExp literal -> failure x
  BTermExp storageuntypedexp -> failure x
  BArithExp arithmeticexp -> failure x
  BInitExp storageuntypedexp -> failure x
transBooleanExp :: BooleanExp -> Result
transBooleanExp x = case x of
  BoolExp basicexp1 boolean basicexp2 -> failure x
transArithmeticExp :: ArithmeticExp -> Result
transArithmeticExp x = case x of
  ArithExp basicexp1 arithmetic basicexp2 -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  Eq -> failure x
  GEq -> failure x
  LEq -> failure x
  Ge -> failure x
  Le -> failure x
transArithmetic :: Arithmetic -> Result
transArithmetic x = case x of
  Add -> failure x
  Sub -> failure x
  Mul -> failure x
  Div -> failure x
transBuiltinTypes :: BuiltinTypes -> Result
transBuiltinTypes x = case x of
  IntType -> failure x
  AddrType -> failure x
  BoolType -> failure x
  AssetType -> failure x
  StringType -> failure x
  BytesType -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  IntLit integer -> failure x
  TrueLit -> failure x
  FalseLit -> failure x
  StringLit string -> failure x

