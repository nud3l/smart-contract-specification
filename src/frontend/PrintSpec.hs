{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintSpec.
--   Generated by the BNF converter.

module PrintSpec where

import AbsSpec
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Specification where
  prt i e = case e of
    Spec statements -> prPrec i 0 (concatD [prt 0 statements])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Specification] where
  prt = prtList

instance Print [Statement] where
  prt = prtList

instance Print Statement where
  prt i e = case e of
    Config configurationexps -> prPrec i 0 (concatD [doc (showString "@config"), prt 0 configurationexps])
    Store storagetypedexps -> prPrec i 0 (concatD [doc (showString "@storage"), prt 0 storagetypedexps])
    Global booleanexps -> prPrec i 0 (concatD [doc (showString "@global"), prt 0 booleanexps])
    Pure functionsignature purefunction -> prPrec i 0 (concatD [doc (showString "@pure"), prt 0 functionsignature, prt 0 purefunction])
    Trans functionsignature transitionfunction -> prPrec i 0 (concatD [doc (showString "@transition"), prt 0 functionsignature, prt 0 transitionfunction])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print ConfigurationExp where
  prt i e = case e of
    Target targettype -> prPrec i 0 (concatD [doc (showString "target"), doc (showString ":"), prt 0 targettype])
    Language languagetype -> prPrec i 0 (concatD [doc (showString "language"), doc (showString ":"), prt 0 languagetype])
    Meter metertype -> prPrec i 0 (concatD [doc (showString "meter"), doc (showString ":"), prt 0 metertype])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print TargetType where
  prt i e = case e of
    TarEVM -> prPrec i 0 (concatD [doc (showString "EVM")])
    TarEWASM -> prPrec i 0 (concatD [doc (showString "EWASM")])
    TarIELE -> prPrec i 0 (concatD [doc (showString "IELE")])
    TarScilla -> prPrec i 0 (concatD [doc (showString "Scilla")])

instance Print LanguageType where
  prt i e = case e of
    LanSol -> prPrec i 0 (concatD [doc (showString "Solidity")])
    LanVy -> prPrec i 0 (concatD [doc (showString "Vyper")])
    LanFlin -> prPrec i 0 (concatD [doc (showString "Flint")])

instance Print MeterType where
  prt i e = case e of
    Gas -> prPrec i 0 (concatD [doc (showString "Gas")])

instance Print [ConfigurationExp] where
  prt = prtList

instance Print StorageTypedExp where
  prt i e = case e of
    SVar termtyped -> prPrec i 0 (concatD [prt 0 termtyped])
    SMap mappingtyped -> prPrec i 0 (concatD [prt 0 mappingtyped])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print TermTyped where
  prt i e = case e of
    SVarDecl str builtintypes -> prPrec i 0 (concatD [prt 0 str, doc (showString ":"), prt 0 builtintypes])

instance Print MappingTyped where
  prt i e = case e of
    SMapDecl str storagetypedexp termtyped -> prPrec i 0 (concatD [prt 0 str, doc (showString "["), prt 0 storagetypedexp, doc (showString "]"), doc (showString "=>"), prt 0 termtyped])

instance Print StorageUntypedExp where
  prt i e = case e of
    SUvar str -> prPrec i 0 (concatD [prt 0 str])
    SUmap mapping -> prPrec i 0 (concatD [prt 0 mapping])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Mapping where
  prt i e = case e of
    SUmapDecl str storageuntypedexp -> prPrec i 0 (concatD [prt 0 str, doc (showString "["), prt 0 storageuntypedexp, doc (showString "]")])

instance Print [StorageTypedExp] where
  prt = prtList

instance Print [StorageUntypedExp] where
  prt = prtList

instance Print FunctionSignature where
  prt i e = case e of
    FunSig str storageuntypedexps -> prPrec i 0 (concatD [prt 0 str, doc (showString "("), prt 0 storageuntypedexps, doc (showString ")")])

instance Print PureFunction where
  prt i e = case e of
    PureFun inputs outputs postcondition -> prPrec i 0 (concatD [prt 0 inputs, prt 0 outputs, prt 0 postcondition])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print TransitionFunction where
  prt i e = case e of
    TransFun inputs assign precondition postcondition -> prPrec i 0 (concatD [prt 0 inputs, prt 0 assign, prt 0 precondition, prt 0 postcondition])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print Inputs where
  prt i e = case e of
    In storagetypedexps -> prPrec i 0 (concatD [doc (showString "inputs:"), prt 0 storagetypedexps])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print Outputs where
  prt i e = case e of
    Out returnss -> prPrec i 0 (concatD [doc (showString "outputs:"), prt 0 returnss])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print Returns where
  prt i e = case e of
    SReturn storageuntypedexp -> prPrec i 0 (concatD [prt 0 storageuntypedexp])
    MReturn storagetypedexp -> prPrec i 0 (concatD [prt 0 storagetypedexp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print Assign where
  prt i e = case e of
    Assig storageuntypedexps -> prPrec i 0 (concatD [doc (showString "assign:"), prt 0 storageuntypedexps])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print PreCondition where
  prt i e = case e of
    PreCon booleanexps -> prPrec i 0 (concatD [doc (showString "requires:"), prt 0 booleanexps])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print PostCondition where
  prt i e = case e of
    PostCon booleanexps -> prPrec i 0 (concatD [doc (showString "ensures:"), prt 0 booleanexps])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print [Returns] where
  prt = prtList

instance Print [PureFunction] where
  prt = prtList

instance Print [TransitionFunction] where
  prt = prtList

instance Print [Inputs] where
  prt = prtList

instance Print [Outputs] where
  prt = prtList

instance Print [Assign] where
  prt = prtList

instance Print [PreCondition] where
  prt = prtList

instance Print [PostCondition] where
  prt = prtList

instance Print BasicExp where
  prt i e = case e of
    BLitExp literal -> prPrec i 0 (concatD [prt 0 literal])
    BTermExp storageuntypedexp -> prPrec i 0 (concatD [prt 0 storageuntypedexp])
    BArithExp arithmeticexp -> prPrec i 0 (concatD [prt 0 arithmeticexp])
    BInitExp storageuntypedexp -> prPrec i 0 (concatD [doc (showString "initial("), prt 0 storageuntypedexp, doc (showString ")")])

instance Print BooleanExp where
  prt i e = case e of
    BoolExp basicexp1 boolean basicexp2 -> prPrec i 0 (concatD [prt 0 basicexp1, prt 0 boolean, prt 0 basicexp2])
  prtList _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print ArithmeticExp where
  prt i e = case e of
    ArithExp basicexp1 arithmetic basicexp2 -> prPrec i 0 (concatD [prt 0 basicexp1, prt 0 arithmetic, prt 0 basicexp2])

instance Print [BooleanExp] where
  prt = prtList

instance Print Boolean where
  prt i e = case e of
    Eq -> prPrec i 0 (concatD [doc (showString "==")])
    GEq -> prPrec i 0 (concatD [doc (showString ">=")])
    LEq -> prPrec i 0 (concatD [doc (showString "<=")])
    Ge -> prPrec i 0 (concatD [doc (showString ">")])
    Le -> prPrec i 0 (concatD [doc (showString "<")])

instance Print Arithmetic where
  prt i e = case e of
    Add -> prPrec i 0 (concatD [doc (showString "+")])
    Sub -> prPrec i 0 (concatD [doc (showString "-")])
    Mul -> prPrec i 0 (concatD [doc (showString "*")])
    Div -> prPrec i 0 (concatD [doc (showString "/")])

instance Print BuiltinTypes where
  prt i e = case e of
    IntType -> prPrec i 0 (concatD [doc (showString "Int")])
    AddrType -> prPrec i 0 (concatD [doc (showString "Address")])
    BoolType -> prPrec i 0 (concatD [doc (showString "Bool")])
    AssetType -> prPrec i 0 (concatD [doc (showString "Asset")])
    StringType -> prPrec i 0 (concatD [doc (showString "String")])
    BytesType -> prPrec i 0 (concatD [doc (showString "Bytes")])

instance Print Literal where
  prt i e = case e of
    IntLit n -> prPrec i 0 (concatD [prt 0 n])
    TrueLit -> prPrec i 0 (concatD [doc (showString "True")])
    FalseLit -> prPrec i 0 (concatD [doc (showString "False")])
    StringLit str -> prPrec i 0 (concatD [prt 0 str])

